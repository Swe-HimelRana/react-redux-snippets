{
  "import": {
    "prefix": "imp",
    "body": "import ${1:moduleName} from '${2:module}';$0",
    "description": "basic import"
  },
  "importDestructing": {
    "prefix": "impd",
    "body": "import { $1 } from '${2:module}';$0",
    "description": "Destructing import"
  },
  "Import axios": {
    "prefix": "impaxios",
    "body": ["import axios from 'axios';$0"],
    "description": "Import axios"
  },
  "method": {
    "prefix": "method",
    "body": ["${1:methodName} = (${2:params}) => {", "\t${0}", "}", ""],
    "description": "Creates a method inside a class in ES7 syntax"
  },
  "Objectdestructing": {
    "prefix": "objdes",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Object destructing"
  },
  "Arraydestructing": {
    "prefix": "arrdes",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Array destructing"
  },
  "setInterval": {
    "prefix": "setint",
    "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms})", ""],
    "description": "SetInterval"
  },
  "setTimeOut": {
    "prefix": "settout",
    "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms})", ""],
    "description": "setTimeout"
  },
  "promise": {
    "prefix": "promise",
    "body": ["return new Promise((resolve, reject) => {", "\t${1}", "})", ""],
    "description": "Promise"
  },
  "Console Log": {
    "prefix": "clog",
    "body": ["console.log($1);$0"],
    "description": "Console Log"
  },
  "import React": {
    "prefix": "impr",
    "body": ["import React from 'react';$0", ""],
    "description": "import React Functional Component Friendly"
  },
  "import React, { Component }": {
    "prefix": "imprc",
    "body": ["import React, { Component } from 'react';$0", ""],
    "description": "import React Functional Class Component Friendly"
  },
  "import ReactDOM": {
    "prefix": "imprp",
    "body": ["import PropTypes from 'prop-types';$0", ""],
    "description": "import React PropTypes "
  },
  "import PropTypes": {
    "prefix": "imprdom",
    "body": ["import ReactDOM from 'react-dom';$0", ""],
    "description": "import ReactDom "
  },
  "import React Router, Switch, Route": {
    "prefix": "imprrouter",
    "body": [
      "import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'",
      ""
    ],
    "description": "import BrowserRouter as Router, Switch, Route "
  },
  "import React Browser Router - Link": {
    "prefix": "imprrlink",
    "body": ["import { Link } from 'react-router-dom';$0", ""],
    "description": "import Link React Router "
  },
  "import React Browser Router - NavLink": {
    "prefix": "imprrnavlink",
    "body": ["import { NavLink } from 'react-router-dom';$0", ""],
    "description": "import NavLink React Router "
  },
  "React Funtional component": {
    "prefix": "rfc",
    "body": [
      "function ${1:Component}() {",
      "  return (",
      "    <div>",
      "      $2",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "React Funtional component"
  },
  "React ClassCompoment": {
    "prefix": "rcc",
    "body": [
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React Class Component"
  },
  "React constractor": {
    "prefix": "rccc",
    "body": [
      "  constractor(${1:props}){",
      "    super(${1:props})",
      "    $2",
      "  }"
    ],
    "description": "React Class constractor"
  },
  "ReactLifeCycle Component did mount": {
    "prefix": "rlcdm",
    "body": ["componentDidMount(){", "    $1", "}"],
    "description": "ReactLifeCycle Component did mount"
  },
  "ReactLifeCycle Component did Update": {
    "prefix": "rlcdu",
    "body": ["componentDidUpdate(prevProps){", "    $1", "}"],
    "description": "ReactLifeCycle Component did Update"
  },
  "React State": {
    "prefix": "rs",
    "body": ["state = {", "\t$1", "}", ""],
    "description": "React State."
  },
  "React Set State": {
    "prefix": "rss",
    "body": ["this.setState({", "  $1", "})"],
    "description": "React Set State"
  },
  "Proptypes": {
    "prefix": "pt",
    "body": [
      "PropTypes.${1|array,bool,func,number,object,string,node,element,any|},$0"
    ],
    "description": "Proptypes"
  },
  "Proptypes Required": {
    "prefix": "ptr",
    "body": [
      "PropTypes.${1|array,bool,func,number,object,string,node,element,any|}.isRequired,$0"
    ],
    "description": "Proptypes Required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": ["PropTypes.oneOfType([", "\t$0", "]),"],
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": ["PropTypes.oneOfType([", "\t$0", "]).isRequired,"],
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": ["PropTypes.shape({", "\t$0", "}),"],
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": ["PropTypes.shape({", "\t$0", "}).isRequired,"],
    "description": "An object taking on a particular shape required"
  },
  "propTypeExact": {
    "prefix": "ptex",
    "body": ["PropTypes.exact({", "\t$0", "}),"],
    "description": "An object with warnings on extra properties"
  },
  "propTypeExactRequired": {
    "prefix": "ptexr",
    "body": ["PropTypes.exact({", "\t$0", "}).isRequired,"],
    "description": "An object with warnings on extra properties required"
  },

  "import redux statement": {
    "prefix": "impredux",
    "body": ["import { connect } from 'react-redux';", ""],
    "description": "import connect from 'react-redux'"
  },
  "Redux Map State To Props": {
    "prefix": "redstp",
    "body": [
      "const mapStateToProps = (${1:state}) => {",
      "  return {",
      "    leads: ${1:state}.${2:reducer}.${3:data}",
      "  }",
      "}"
    ],
    "description": "Redux Map State To Props"
  },
  "Redux Map Dispatch To Props": {
    "prefix": "reddtp",
    "body": ["const mapDispatchToProps = {", "\t", "}", ""],
    "description": "Redux Dispatch State To Props"
  },
  "react export with redux": {
    "prefix": "redex",
    "body": ["export default connect(mapStateToProps, {})(${1:className});"],
    "description": "react export with redux"
  },
  "Redux Store": {
    "prefix": "redstore",
    "body": [
      "import { createStore, applyMiddleware } from \"redux\";",
      "import { composeWithDevTools } from \"redux-devtools-extension\";",
      "import thunk from \"redux-thunk\";",
      "import rootReducer from \"${1:./reducers/rootReducer}\";",
      "",
      "const initialState = {};",
      "const middlewares = [thunk];",
      "",
      "const store = createStore(",
      "    rootReducer,",
      "    initialState,",
      "    composeWithDevTools(applyMiddleware(...middlewares))",
      ")",
      "",
      "export default store;"
    ],
    "description": "full Redux Store code"
  },
  "Redux RootReducer": {
    "prefix": "redrreducer",
    "body": [
      "import { combineReducers } from \"redux\";",
      "",
      "export default combineReducers({",
      "  $1",
      "});"
    ],
    "description": "Redux RootReducer"
  },
  "Redux Reducer": {
    "prefix": "redreducer",
    "body": [
      "",
      "",
      "const initialState = {",
      "  leads: [],",
      "};",
      "",
      "export default function (state = initialState, action) {",
      "  switch (action.type) {",
      "    case ${1:type}:",
      "      return {",
      "        ...state,",
      "        $2",
      "      };",
      "    default:",
      "      return state;",
      "  }",
      "}"
    ],
    "description": "Redux Reducer"
  },
  "Redux Action": {
    "prefix": "redaction",
    "body": [
      "export const ${3:Name}= (${4:param}) => {",
      "  return {",
      "    type: ${1:Type},",
      "    payload: ${4:msg}$5,",
      "  };",
      "};"
    ],
    "description": "Redux Action"
  },
  "Redux Thunk Action": {
    "prefix": "redtaction",
    "body": [
      "export const ${1:name}= () => (dispatch) => {",
      "  axios",
      "    .${2|get,post,delete,put,head,patch,options,request|}(\"${3:apilocation}\")",
      "    .then((res) => {",
      "      dispatch({",
      "        type: ${4:Type},",
      "        payload: ${5:res.data},",
      "      });",
      "    })",
      "    .catch((err) => {",
      "      console.log(err);",
      "    });",
      "};"
    ],
    "description": "Redux Thunk Action"
  }
}
